     1                                  ;=====================================================================================================================================
     2                                  ;  Name: Loc Nguyen
     3                                  ;  Email: locdacnguyen0@gmail.com
     4                                  ;	This course number, namely “CPSC240-1”.
     5                                  ;	The words: “Final Program Test”.
     6                                  ;======================================================================================================================================
     7                                  
     8                                  extern scanf
     9                                  extern printf
    10                                  extern isnan
    11                                  ; extern isinteger			;From isinteger.asm
    12                                  ; extern atolong				;From atol.asm
    13                                  ; extern printArray
    14                                  global random_fill_array
    15                                  
    16                                  section .data
    17 00000000 256C640A00              	integerOutputFormat db "%ld", 10, 0
    18 00000005 257300                  	stringOutputFormat db "%s", 0
    19                                  
    20                                  section .bss
    21                                  	;Nothing declared inside .bss
    22                                  
    23                                  section .text
    24                                  random_fill_array:
    25                                  
    26 00000000 55                      push rbp                                          ;Backup rbp
    27 00000001 4889E5                  mov  rbp,rsp                                      ;The base pointer now points to top of stack
    28 00000004 57                      push rdi                                          ;Backup rdi
    29 00000005 56                      push rsi                                          ;Backup rsi
    30 00000006 52                      push rdx                                          ;Backup rdx
    31 00000007 51                      push rcx                                          ;Backup rcx
    32 00000008 4150                    push r8                                           ;Backup r8
    33 0000000A 4151                    push r9                                           ;Backup r9
    34 0000000C 4152                    push r10                                          ;Backup r10
    35 0000000E 4153                    push r11                                          ;Backup r11
    36 00000010 4154                    push r12                                          ;Backup r12
    37 00000012 4155                    push r13                                          ;Backup r13
    38 00000014 4156                    push r14                                          ;Backup r14
    39 00000016 4157                    push r15                                          ;Backup r15
    40 00000018 53                      push rbx                                          ;Backup rbx
    41 00000019 9C                      pushf                                             ;Backup rflags
    42                                  
    43 0000001A 4989FE                  	mov r14, rdi		;pointer to the array
    44 0000001D 4989F5                  	mov r13, rsi		;array capacity
    45 00000020 41BC00000000            	mov r12, 0		  ;current index of array
    46                                  
    47                                  	; for testing hsum
    48                                  	; mov r15, 132
    49                                  	; jmp startOfLoop
    50                                  	; changenum:
    51                                  	; mov r15, 69
    52                                  
    53                                  
    54                                  startOfLoop:
    55                                  
    56 00000026 490FC7F7                  rdrand r15
    57 0000002A F24D0F2AFF              	cvtsi2sd xmm15, r15
    58                                  
    59                                  	;Checking nan
    60 0000002F 488B1C24                	 mov rbx, [rsp]
    61 00000033 48B9000000000000F0-     	 mov rcx, 0x7ff0000000000000    ;isolate the relevant bits
    61 0000003C 7F                 
    62 0000003D 4821CB                  	 and rbx, rcx
    63 00000040 48C1EB34                	 shr rbx, 52                    ;all isolated bits are at the right
    64 00000044 4881FBFF070000          	 cmp rbx, 2047                  ;compare those isolated bits to 0b11111111111
    65                                  
    66                                  ;Checking nan
    67 0000004B 488B1C24                 mov rbx, [rsp]
    68 0000004F 48B9000000000000F0-      mov rcx, 0x7ff0000000000000    ;isolate the relevant bits
    68 00000058 7F                 
    69 00000059 4821CB                   and rbx, rcx
    70 0000005C 48C1EB34                 shr rbx, 52                    ;all isolated bits are at the right
    71 00000060 4881FBFF070000           cmp rbx, 2047                  ;compare those isolated bits to 0b11111111111
    72                                  
    73 00000067 4883F801                 cmp rax, 1
    74 0000006B 74B9                     je startOfLoop
    75                                  ;Checking zeros
    76 0000006D 488B1C24                 mov rbx, [rsp]
    77 00000071 48B9000000000000F0-      mov rcx, 0x7ff0000000000000    ;isolate the relevant bits
    77 0000007A 7F                 
    78 0000007B 4821CB                   and rbx, rcx
    79 0000007E 48C1EB34                 shr rbx, 52                    ;all isolated bits are at the right
    80 00000082 4883FB00                 cmp rbx, 0                  ;compare those isolated bits to 0b0
    81                                  
    82                                  		;call nan function
    83                                      ; mov rax, 0
    84                                      ; movsd xmm0, xmm15
    85                                      ; call isnan
    86                                  
    87 00000086 4883F801                    cmp rax, 1
    88 0000008A 749A                        je startOfLoop
    89                                  
    90 0000008C F2470F113CE6                movsd [r14+8*r12], xmm15
    91 00000092 49FFC4                      inc r12
    92 00000095 4D39EC                      cmp r12, r13
    93 00000098 7402                        je exitProgram
    94 0000009A EB8A                        jmp startOfLoop
    95                                  
    96                                  exitProgram:
    97                                  
    98                                  
    99 0000009C 4C89E0                  mov qword rax, r12				;Backing up r12 into rax to be returned
   100                                  
   101                                  	;Popping all of registers in reverse order as pushes
   102 0000009F 5B                      	pop rbx                                                     ;Restore rbx
   103 000000A0 415F                    	pop r15                                                     ;Restore r15
   104 000000A2 415E                    	pop r14                                                     ;Restore r14
   105 000000A4 415D                    	pop r13                                                     ;Restore r13
   106 000000A6 415C                    	pop r12                                                     ;Restore r12
   107 000000A8 415B                    	pop r11                                                     ;Restore r11
   108 000000AA 415A                    	pop r10                                                     ;Restore r10
   109 000000AC 4159                    	pop r9                                                      ;Restore r9
   110 000000AE 4158                    	pop r8							    ;Restore r8
   111 000000B0 59                      	pop rcx                                                     ;Restore rcx
   112 000000B1 5A                      	pop rdx                                                     ;Restore rdx
   113 000000B2 5E                      	pop rsi                                                     ;Restore rsi
   114 000000B3 5F                      	pop rdi                                                     ;Restore rdi
   115 000000B4 5D                      	pop rbp                                                     ;Restore rbp
   116 000000B5 5B                      	pop rbx
   117                                  
   118 000000B6 C3                      	ret                                               ;Returning current number of items in array
