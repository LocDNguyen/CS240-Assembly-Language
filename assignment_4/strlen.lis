     1                                  ;===== Function strlen ==================================================================================================
     2                                  ;************************************************************************************************************************
     3                                  ;Program name: "strlen".  This program computes the length of a string exclusive of the terminating null character.     *
     4                                  ;This is a library function not specific to any one program.  Copyright (C) 2018  Floyd Holliday                        *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public      *
     6                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will  *
     7                                  ;be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR  *
     8                                  ;PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public License v3 is         *
     9                                  ;available here:  <https://www.gnu.org/licenses/>.                                                                      *
    10                                  ;************************************************************************************************************************
    11                                  
    12                                  ;Author information
    13                                  ;   Author name: Floyd Holliday
    14                                  ;   Author's email: holliday@fullerton.edu
    15                                  
    16                                  ;Function information
    17                                  ;   Function name: strlen
    18                                  ;   Programming language: X86
    19                                  ;   Language syntax: Intel
    20                                  ;   Function prototype:  int strlen(char *)
    21                                  ;   Reference: none
    22                                  ;   Input parameter: an address to a byte in memory where a null-terminate string begins.
    23                                  ;   Output parameter: An integer representing the count of bytes in the string without counting the null char.
    24                                  
    25                                  ;Assemble: nasm -f elf64 -o strlen.o -l strlen.lis strlen.asm
    26                                  
    27                                  ;Date development began: 2018-April-15
    28                                  ;Date comments restructured: 2022-July-15
    29                                  
    30                                  
    31                                  ;===== Begin code section ==============================================================================================
    32                                  
    33                                  ;Declarations
    34                                  global strlen
    35                                  
    36                                  section .data
    37                                  ;This section is empty.
    38                                  
    39                                  section .bss
    40                                  ;This section is empty.
    41                                  
    42                                  section .text
    43                                  strlen:
    44                                  
    45                                  ;===== Backup segment ==================================================================================================
    46                                  ;No floating point data are used in this program.  Therefore, state components FPU, SSE, AVX are not backed up.
    47                                  
    48                                  ;=========== Back up all the GPR registers except rax, rsp, and rip ====================================================
    49                                  
    50 00000000 55                      push       rbp                          ;Save a copy of the stack base pointer
    51 00000001 4889E5                  mov        rbp, rsp                     ;We do this in order to be fully compatible with C and C++.
    52 00000004 53                      push       rbx                          ;Back up rbx
    53 00000005 51                      push       rcx                          ;Back up rcx
    54 00000006 52                      push       rdx                          ;Back up rdx
    55 00000007 56                      push       rsi                          ;Back up rsi
    56 00000008 57                      push       rdi                          ;Back up rdi
    57 00000009 4150                    push       r8                           ;Back up r8
    58 0000000B 4151                    push       r9                           ;Back up r9
    59 0000000D 4152                    push       r10                          ;Back up r10
    60 0000000F 4153                    push       r11                          ;Back up r11
    61 00000011 4154                    push       r12                          ;Back up r12
    62 00000013 4155                    push       r13                          ;Back up r13
    63 00000015 4156                    push       r14                          ;Back up r14
    64 00000017 4157                    push       r15                          ;Back up r15
    65 00000019 9C                      pushf                                   ;Back up rflags
    66                                  
    67                                  ;===== Application strlen begins here ==================================================================================
    68                                  
    69                                  ;Set up registers needed by the repnz instruction.
    70                                  ;rdi already holds the starting address of the array of char (the string).
    71 0000001A 4831C9                  xor        rcx, rcx                             ;This is a fast technique that zeros out rcx
    72 0000001D 48F7D1                  not        rcx                                  ;This is a fast instruction that flips all bits in rcx.  rcx now holds 0xFFFFFFFFFFFFFFFF, which is both -1 and
    73                                  ;                                               ;the largest unsigned integer.  The same result could have been obtained by "mov rcx, 0xFFFFFFFFFFFFFFFF", but
    74                                  ;                                               ;that is a slower operation.
    75 00000020 30C0                    xor        al, al                               ;Set the lowest 8 bits (1 byte) of rax to zero.  There is no need to use extra machine time to zero out all of
    76                                  ;                                               ;rax because repnz only uses the lowest 8 bits of rax.
    77 00000022 FC                      cld                                             ;Clear the direction flag, which is a single bit inside of rflags register.  The term "clear" means "give it a
    78                                  ;                                               ;value of 0.  When the direction bit is zero the register rdi will increment by 1 in each iteration of the
    79                                  ;                                               ;loop; otherwise, rdi will decrement in each iteration.
    80 00000023 F2AE                    repnz      scasb                                ;This is a compact loop construction.  In pseudocode it does the following::
    81                                  ;                                                   ;repeat
    82                                  ;                                                   ;    {rcx--;
    83                                  ;                                                   ;     rdx++;
    84                                  ;                                                   ;    }
    85                                  ;                                                   ;until (rcx == 0 || [rdi] == al);
    86                                  ;Since it is very unlikely that rcx will decement to zero the loop effectively continues until [rdi] equals null
    87                                  ;(the value in the lowest 1 byte or rax).  Notice that the null character is counted in the number of iterations
    88                                  ;of the loop.  In the next statements the count will be adjusted to compensate for the extra iteration.
    89                                  
    90 00000025 48F7D1                  not        rcx                                  ;Invert all the bits in rcx.  The result is the number of iterations of the loop
    91 00000028 48FFC9                  dec        rcx                                  ;Decrement rcx by one in order to avoid counting the null character.
    92 0000002B 4889C8                  mov        rax, rcx                             ;Copy the count into rax, which is the standard register for returning integers to a caller.
    93                                  
    94                                  ;=========== Restore GPR values and return to the caller ===============================================================
    95                                  
    96 0000002E 9D                      popf                                            ;Restore rflags
    97 0000002F 415F                    pop        r15                                  ;Restore r15
    98 00000031 415E                    pop        r14                                  ;Restore r14
    99 00000033 415D                    pop        r13                                  ;Restore r13
   100 00000035 415C                    pop        r12                                  ;Restore r12
   101 00000037 415B                    pop        r11                                  ;Restore r11
   102 00000039 415A                    pop        r10                                  ;Restore r10
   103 0000003B 4159                    pop        r9                                   ;Restore r9
   104 0000003D 4158                    pop        r8                                   ;Restore r8
   105 0000003F 5F                      pop        rdi                                  ;Restore rdi
   106 00000040 5E                      pop        rsi                                  ;Restore rsi
   107 00000041 5A                      pop        rdx                                  ;Restore rdx
   108 00000042 59                      pop        rcx                                  ;Restore rcx
   109 00000043 5B                      pop        rbx                                  ;Restore rbx
   110 00000044 5D                      pop        rbp                                  ;Restore rbp
   111                                  ;Notice that rax is not restored because it holds the value to be returned to the caller.
   112                                  
   113 00000045 C3                      ret;                                            ;ret will pop the system stack into rip.  The value obtained is an
   114                                  ;                                               ;address where the next instruction to be executed is stored.
   115                                  ;===== End of subprogram strlen ========================================================================================
   116                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2
