     1                                  ;****************************************************************************************************************************
     2                                  ; Program name: "cosine". This program takes a float input and converts it to it's cosine counterpart.                      *
     3                                  ; Copyright (C) 2022 Loc Nguyen.                                                                                            *
     4                                  ;                                                                                                                           *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License *
     6                                  ; version 3 as published by the Free Software Foundation.                                                                   *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied        *
     8                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.    *
     9                                  ; A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                           *
    10                                  ; ***************************************************************************************************************************
    11                                  ;
    12                                  ;
    13                                  ; ========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3
    14                                  ;
    15                                  ; Author information
    16                                  ;   Author name: Loc Nguyen
    17                                  ;   Author email: lnguy121@csu.fullerton.edu
    18                                  ;
    19                                  ; Function information
    20                                  ;   Function name: cosine
    21                                  ;   Programming language: X86
    22                                  ;   Language syntax: Intel
    23                                  ;   Function prototype:  double cosine(double)
    24                                  ;   Reference: None
    25                                  ;   Input parameter: Float number
    26                                  ;   Output parameter: Cosine counterpart of inputted number
    27                                  ;
    28                                  ; Assemble: nasm -f elf64 -o cosine.o -l cosine.lis cosine.asm
    29                                  ;
    30                                  ; Date development began: 2018-Oct-27
    31                                  ; Date comments restructured: 2022-Oct-29
    32                                  ;
    33                                  ; ========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3
    34                                  
    35                                  global cosine
    36                                  segment .data
    37                                  
    38                                  segment .bss
    39                                  
    40                                  segment .text
    41                                  
    42                                  cosine:
    43                                  
    44 00000000 55                      push rbp
    45 00000001 4889E5                  mov  rbp,rsp
    46 00000004 57                      push rdi                                                    ;Backup rdi
    47 00000005 56                      push rsi                                                    ;Backup rsi
    48 00000006 52                      push rdx                                                    ;Backup rdx
    49 00000007 51                      push rcx                                                    ;Backup rcx
    50 00000008 4150                    push r8                                                     ;Backup r8
    51 0000000A 4151                    push r9                                                     ;Backup r9
    52 0000000C 4152                    push r10                                                    ;Backup r10
    53 0000000E 4153                    push r11                                                    ;Backup r11
    54 00000010 4154                    push r12                                                    ;Backup r12
    55 00000012 4155                    push r13                                                    ;Backup r13
    56 00000014 4156                    push r14                                                    ;Backup r14
    57 00000016 4157                    push r15                                                    ;Backup r15
    58 00000018 53                      push rbx                                                    ;Backup rbx
    59 00000019 9C                      pushf                                                       ;Backup rflags
    60                                  
    61                                  ; save the user input into a less volatile register ( this is X in the summation )
    62 0000001A F2440F10F8              movsd xmm15, xmm0
    63                                  
    64                                  ; Current (first) term of maclaurin series is 1.0
    65 0000001F B801000000              mov rax, 1
    66 00000024 F24C0F2AF0              cvtsi2sd xmm14, rax
    67                                  ; we'll need the numbers 2.0, -1.0, and 1.0 to multiply floats
    68                                  ; (from 2k+1 and 2k+2)
    69 00000029 B801000000              mov rax, 1
    70 0000002E F24C0F2AE8              cvtsi2sd xmm13, rax
    71 00000033 B802000000              mov rax, 2
    72 00000038 F24C0F2AE0              cvtsi2sd xmm12, rax
    73 0000003D 48C7C0FFFFFFFF          mov rax, -1
    74 00000044 F2480F2AE8              cvtsi2sd xmm5, rax
    75                                  ; start k at 0, since we already have the first term of the sequence
    76 00000049 41BF00000000            mov r15, 0
    77 0000004F F24D0F2ADF              cvtsi2sd xmm11, r15
    78                                  ; stop at 10,000,000
    79 00000054 41BE80969800            mov r14, 10000000
    80                                  ; Total sum so far
    81 0000005A 66450F57D2              xorpd xmm10, xmm10
    82                                  beginloop:
    83                                  ; Check if r15 (k) has hit r14 (10000000)
    84 0000005F 4D39F7                  cmp r15, r14
    85 00000062 7449                    je end
    86                                  ; Otherwise, add the current term of the sequence
    87 00000064 F2450F58D6              addsd xmm10, xmm14
    88                                  ; Then, compute the next term of the sequence (place into xmm14)
    89                                  ; 2k+1 - xmm12 * xmm11 + xmm13
    90                                  ; creating temporary register for calculations xmm9
    91 00000069 F2450F10CC              movsd xmm9, xmm12
    92 0000006E F2450F59CB              mulsd xmm9, xmm11
    93 00000073 F2450F58CD              addsd xmm9, xmm13
    94                                  
    95                                  ; 2k+2 - xmm12 * xmm11 + xmm12
    96                                  ; creating temporary register for calculations xmm8
    97 00000078 F2450F10C4              movsd xmm8, xmm12
    98 0000007D F2450F59C3              mulsd xmm8, xmm11
    99 00000082 F2450F58C4              addsd xmm8, xmm12
   100                                  
   101                                  ; (2k+1) * (2k+2) - xmm8 * xmm9
   102 00000087 F2450F59C1              mulsd xmm8, xmm9
   103                                  
   104                                  ; X^2 - user input at xmm15
   105                                  ; creating temporary register for calculations xmm7
   106 0000008C F2410F10FF              movsd xmm7, xmm15
   107 00000091 F20F59FF                mulsd xmm7, xmm7
   108                                  
   109                                  ; X^2
   110                                  ; ----
   111                                  ; (2k+1) (2k+2) - result will be in xmm7
   112 00000095 F2410F5EF8              divsd xmm7, xmm8
   113                                  ; multiply -1 against this relation
   114 0000009A F20F59FD                mulsd xmm7, xmm5
   115                                  ; multiply the recurrance relation against the current term and set the current term to result
   116 0000009E F2440F59F7              mulsd xmm14, xmm7
   117 000000A3 49FFC7                  inc r15
   118 000000A6 F24D0F2ADF              cvtsi2sd xmm11, r15
   119 000000AB EBB2                    jmp beginloop
   120                                  
   121                                  end:
   122 000000AD F2410F10C2              movsd xmm0, xmm10
   123                                  
   124                                  
   125 000000B2 9D                      popf                                                        ;Restore rflags
   126 000000B3 5B                      pop rbx                                                     ;Restore rbx
   127 000000B4 415F                    pop r15                                                     ;Restore r15
   128 000000B6 415E                    pop r14                                                     ;Restore r14
   129 000000B8 415D                    pop r13                                                     ;Restore r13
   130 000000BA 415C                    pop r12                                                     ;Restore r12
   131 000000BC 415B                    pop r11                                                     ;Restore r11
   132 000000BE 415A                    pop r10                                                     ;Restore r10
   133 000000C0 4159                    pop r9                                                      ;Restore r9
   134 000000C2 4158                    pop r8                                                      ;Restore r8
   135 000000C4 59                      pop rcx                                                     ;Restore rcx
   136 000000C5 5A                      pop rdx                                                     ;Restore rdx
   137 000000C6 5E                      pop rsi                                                     ;Restore rsi
   138 000000C7 5F                      pop rdi                                                     ;Restore rdi
   139 000000C8 5D                      pop rbp                                                     ;Restore rbp
   140                                  
   141 000000C9 C3                      ret
