     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "atolong".  This is a single function distributed without accompanying software.  This function converts a   *
     3                                  ;null-terminated ascii string containing chars in the range '0' .. '9' to the corresponding numeric integer value.          *
     4                                  ;Copyright (C) 2020 Floyd Holliday                                                                                          *
     5                                  ;                                                                                                                           *
     6                                  ;This is a library function distributed without accompanying software.                                                      *
     7                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public   *
     8                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be   *
     9                                  ;useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*
    10                                  ;See the GNU General Public License for more details.  A copy of the GNU Lesser General Public License 3.0 should have been *
    11                                  ;distributed with this function.  If the LGPL does not accompany this software then it is available here:                    *
    12                                  ;<https:;www.gnu.org/licenses/>.                                                                                            *
    13                                  ;****************************************************************************************************************************
    14                                  ;
    15                                  ;
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;
    18                                  ;Author information
    19                                  ;  Author name: Floyd Holliday
    20                                  ;  Author email: holliday@fullerton.edu
    21                                  ;
    22                                  ;This function
    23                                  ;  Function name: atolong
    24                                  ;  Programming languages: X86
    25                                  ;  Syntax: Intel
    26                                  ;  Date program began: 2020-Sep-2
    27                                  ;  Date of last update: 2020-Sep-6
    28                                  ;  Comments reorganized: 2020-Sep-25
    29                                  ;  Assemble: nasm -f elf64 -o atol.o atol.asm
    30                                  ;  Classification: Library
    31                                  ;     Library functions are not specific to any one application program.  They are stored on a server and are available for re-use
    32                                  ;     in the development of future applications.
    33                                  ;
    34                                  ;Purpose
    35                                  ;  The purpose of this program is to convert a null-terminated array of ascii char containing only chars in the range
    36                                  ;  '0' .. '9' to the corresponding numeric value.
    37                                  ;
    38                                  ;Names
    39                                  ;   The function "atolong" was intended to be called atol, however there already is a function in the C++ standard library
    40                                  ;   with that name.  To avoid any possible conflict this function received the longer name, namely: atolong.  A simple web
    41                                  ;   search will produce lots of information about the original atol.
    42                                  ;
    43                                  ;References:
    44                                  ;  Jorgensen: X86-64 Assembly Language Programming with Ubuntu (free download)
    45                                  ;
    46                                  ;Prototype of this function in C++:
    47                                  ;   extern "C" long atolong(char []);
    48                                  ;
    49                                  ;How to call atolong from C++:
    50                                  ;  == Place prototype of atolong at the beginning of the caller function: extern "C" long atolong(long *);
    51                                  ;  == An array of char must exist such as char num[256];
    52                                  ;  == Declare a long such as:  long mynumber;
    53                                  ;  == Call the function:  mynumber = atolong(num);
    54                                  ;
    55                                  ;How to call atolong from C:
    56                                  ;  == Place prototype of atolong at the beginning of the caller function: long atolong(long *);
    57                                  ;  == An array of char must exist such as char num[256];
    58                                  ;  == Declare a long such as:  long mynumber;
    59                                  ;  == Call the function:  mynumber = atolong(num);
    60                                  ;
    61                                  ;How to call atolong from X86:
    62                                  ;  == Declare atolong to be external:  extern atolong
    63                                  ;  == You need a register that holds a valid memory address.  One such example is rsp; another is an array declared in .bss
    64                                  ;  == Make the call setup block:
    65                                  ;     == mov rax,0
    66                                  ;     == mov rdi,rsp         or  mov rdi,<name of array in bss>
    67                                  ;     == call atolong
    68                                  ;     == mov r12,rax         ;Save the converted number in a safer register like r14
    69                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    70                                  ;
    71                                  ;
    72                                  ;
    73                                  ;===== Begin code area ========================================================================================================
    74                                  
    75                                  ;Assembler directives
    76                                  base_number equ 10                      ;10 base of the decimal number system
    77                                  ascii_zero equ 48                       ;48 is the ascii value of '0'
    78                                  null equ 0
    79                                  minus equ '-'
    80                                  
    81                                  extern printf                           ;External C++ function for writing to standard output device
    82                                  extern scanf                            ;External C++ function for reading from the standard input device
    83                                  global atolong                          ;This makes atolong callable by functions outside of this file.
    84                                  
    85                                  segment .data                           ;Place initialized data here
    86                                     ;This segment is empy
    87                                  
    88                                  
    89                                  segment .bss                            ;Declare pointers to un-initialized space in this segment.
    90                                     ;This segment is empty
    91                                  
    92                                  ;==============================================================================================================================
    93                                  ;===== Begin the executable code here.
    94                                  ;==============================================================================================================================
    95                                  segment .text                           ;Place executable instructions in this segment.
    96                                  
    97                                  atolong:                                ;Entry point.  Execution begins here.
    98                                  
    99                                  ;The next two instructions should be performed at the start of every assembly program.
   100 00000000 55                      push rbp                                ;This marks the start of a new stack frame belonging to this execution of this function.
   101 00000001 4889E5                  mov  rbp, rsp                           ;rbp holds the address of the start of this new stack frame.
   102                                  ;The following pushes are performed for safety of the data that may already be in the remaining GPRs.
   103                                  ;This backup process is especially important when this module is called by another asm module.  It is less important when called
   104                                  ;called from a C or C++ function.
   105 00000004 53                      push rbx
   106 00000005 51                      push rcx
   107 00000006 52                      push rdx
   108 00000007 57                      push rdi
   109 00000008 56                      push rsi
   110 00000009 4150                    push r8
   111 0000000B 4151                    push r9
   112 0000000D 4152                    push r10
   113 0000000F 4153                    push r11
   114 00000011 4154                    push r12
   115 00000013 4155                    push r13
   116 00000015 4156                    push r14
   117 00000017 4157                    push r15
   118 00000019 9C                      pushf
   119                                  
   120                                  ;Designate the purpose of selected registers: r8, r9, r10
   121 0000001A 4989F8                  mov r8, rdi                   ;Copy the pointer to char data to r8
   122 0000001D 41B900000000            mov r9, 0                     ;r9 = array index
   123 00000023 41BA00000000            mov r10, 0                    ;r10 = long integer; final answer will be here.
   124                                  
   125                                  ;The first byte in the array may be '+' or '-', which are valid numeric characters.
   126                                  ;We need to check for the presence of a leading sign.
   127 00000029 4180382B                cmp byte [r8+1*0], '+'        ;Check for leading plus sign
   128 0000002D 7508                    jne next_comparison
   129 0000002F 41B901000000            mov r9, 1
   130 00000035 EB0C                    jmp begin_loop
   131                                  
   132                                  next_comparison:
   133 00000037 4180382D                cmp byte [r8+1*0], '-'        ;Check for leading minus sign
   134 0000003B 7506                    jne begin_loop
   135 0000003D 41B901000000            mov r9, 1
   136                                  
   137                                  begin_loop:
   138 00000043 43803C0800              cmp byte [r8+1*r9], null      ;Check the termination condition of the loop
   139 00000048 7420                    je loop_finished
   140 0000004A B80A000000              mov rax, base_number
   141 0000004F 49F7E2                  mul r10
   142 00000052 4989C2                  mov r10, rax
   143                                  
   144                                  ;This is the instuction we want to perform: "add r10, byte [r8+1*r9]".  But the problem is that the
   145                                  ;sizes of operands do not match.  You cannot add a 1-byte number to an 8-byte number.  However, the
   146                                  ;problem can be fixed by using the extension instructions documented on page 77 of the Jorgensen textbook.
   147 00000055 438A0408                mov al, byte [r8+1*r9]        ;The 1-byte number has been copied to al (1-byte register)
   148 00000059 6698                    cbw                           ;The 1-byte number in al has been extended to 2-byte number in ax
   149 0000005B 98                      cwde                          ;The 2-byte number in ax has been extended to 4-byte number in eax
   150 0000005C 4898                    cdqe                          ;The 4-byte number in eax has been extended to 8-byte number in rax
   151                                  
   152                                  ;Now addition is possible
   153 0000005E 4901C2                  add r10, rax                  ;To students in 240 class: wasn't that simply great fun?
   154 00000061 4983EA30                sub r10, ascii_zero           ;A declared constant is compatible with various sizes of registers; explained in Jorgensen.
   155 00000065 49FFC1                  inc r9
   156 00000068 EBD9                    jmp begin_loop
   157                                  loop_finished:
   158                                  
   159                                  ;Set the computed value to negative if needed
   160 0000006A 4180382D                cmp byte [r8+1*0], minus      ;Check for leading minus sign
   161 0000006E 7503                    jne positive
   162 00000070 49F7DA                  neg r10
   163                                  
   164                                  positive:
   165 00000073 4C89D0                  mov rax, r10
   166                                  ;==================================================================================================================================
   167                                  ;Epilogue: restore data to the values held before this function was called.
   168 00000076 9D                      popf
   169 00000077 415F                    pop r15
   170 00000079 415E                    pop r14
   171 0000007B 415D                    pop r13
   172 0000007D 415C                    pop r12
   173 0000007F 415B                    pop r11
   174 00000081 415A                    pop r10
   175 00000083 4159                    pop r9
   176 00000085 4158                    pop r8
   177 00000087 5E                      pop rsi
   178 00000088 5F                      pop rdi
   179 00000089 5A                      pop rdx
   180 0000008A 59                      pop rcx
   181 0000008B 5B                      pop rbx
   182 0000008C 5D                      pop rbp                       ;Now the system stack is in the same state it was when this function began execution.
   183 0000008D C3                      ret                           ;Pop a qword from the stack into rip, and continue executing..
   184                                  ;========== End of module atol.asm ================================================================================================
   185                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
