     1                                  ; ***************************************************************************************************************************
     2                                  ; Program name: "Adding Integers Array". This program takes a string input as well as a sequence of integer inputs.         *
     3                                  ; The program then displays the integer inputs that were put in an array as well as sums all the integers. The program then *
     4                                  ; returns the string input and exits. Copyright (C) 2022 Loc Nguyen.                                                        *
     5                                  ;                                                                                                                           *
     6                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License *
     7                                  ; version 3 as published by the Free Software Foundation.                                                                   *
     8                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied        *
     9                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.    *
    10                                  ; A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                           *
    11                                  ; ***************************************************************************************************************************
    12                                  ;
    13                                  ;
    14                                  ; ========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3
    15                                  ;
    16                                  ; Author information
    17                                  ;   Author name: Loc Nguyen
    18                                  ;   Author email: lnguy121@csu.fullerton.edu
    19                                  ;
    20                                  ; Program information
    21                                  ;   Program name: Adding Integers Array
    22                                  ;   Programming languages: One module in C, two modules in C++, 4 modules in X86, and one module in bash
    23                                  ;   Date program began: 2022-Sep-28
    24                                  ;   Date of last update: 2022-Oct-9
    25                                  ;   Date of reorganization of comments: 2022-Oct-9
    26                                  ;   Files in this program: driver.c, display_array.cpp, isInteger.cpp, manager.asm, input_array.asm, sum.asm, atol.asm, run.sh
    27                                  ;   Status: Finished. The program was tested extensively with no errors in Fedora 36.
    28                                  ;
    29                                  ; This file
    30                                  ;    File name: input_array.asm
    31                                  ;    Language: X86 with Intel syntax
    32                                  ;    Max page width: 133 columns
    33                                  ;    Assemble: nasm -f elf64 -l sum.lis -o sum.o sum.asm
    34                                  ;
    35                                  ; ========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3
    36                                  
    37                                  
    38                                  ;===== Begin code area ============================================================================================================
    39                                  extern printf
    40                                  extern scanf
    41                                  extern isinteger
    42                                  extern atolong
    43                                  
    44                                  global inputs
    45                                  
    46                                  segment .data
    47 00000000 257300                  one_string_format db "%s", 0
    48 00000003 496E76616C69642069-     notInt db "Invalid input(s) was detected and was omitted from the array.", 10, 0
    48 0000000C 6E7075742873292077-
    48 00000015 617320646574656374-
    48 0000001E 656420616E64207761-
    48 00000027 73206F6D6974746564-
    48 00000030 2066726F6D20746865-
    48 00000039 2061727261792E0A00 
    49 00000042 4D6178206E756D6265-     over db "Max number of elements reached, only the first 6 valid inputs will be accounted for.", 10, 0
    49 0000004B 72206F6620656C656D-
    49 00000054 656E74732072656163-
    49 0000005D 6865642C206F6E6C79-
    49 00000066 207468652066697273-
    49 0000006F 7420362076616C6964-
    49 00000078 20696E707574732077-
    49 00000081 696C6C206265206163-
    49 0000008A 636F756E7465642066-
    49 00000093 6F722E0A00         
    50                                  
    51                                  segment .bss  ;Reserved for uninitialized data
    52                                  
    53                                  segment .text ;Reserved for executing instructions.
    54                                  
    55                                  inputs:
    56                                  
    57                                  ;Prolog ===== Insurance for any caller of this assembly module ====================================================================
    58                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    59 00000000 55                      push rbp
    60 00000001 4889E5                  mov  rbp,rsp
    61 00000004 57                      push rdi                                                    ;Backup rdi
    62 00000005 56                      push rsi                                                    ;Backup rsi
    63 00000006 52                      push rdx                                                    ;Backup rdx
    64 00000007 51                      push rcx                                                    ;Backup rcx
    65 00000008 4150                    push r8                                                     ;Backup r8
    66 0000000A 4151                    push r9                                                     ;Backup r9
    67 0000000C 4152                    push r10                                                    ;Backup r10
    68 0000000E 4153                    push r11                                                    ;Backup r11
    69 00000010 4154                    push r12                                                    ;Backup r12
    70 00000012 4155                    push r13                                                    ;Backup r13
    71 00000014 4156                    push r14                                                    ;Backup r14
    72 00000016 4157                    push r15                                                    ;Backup r15
    73 00000018 53                      push rbx                                                    ;Backup rbx
    74 00000019 9C                      pushf                                                       ;Backup rflags
    75                                  
    76                                  ;Moving parameters
    77 0000001A 4989FE                  mov r14, rdi                   ;holds the first parameter (array)
    78 0000001D 4989F5                  mov r13, rsi                   ;holds the second parameter (size of array)
    79 00000020 41BC00000000            mov r12, 0                     ;loop counter
    80                                  
    81                                  ;Start of the loop
    82                                  loopStart:
    83 00000026 B800000000              mov rax, 0
    84 0000002B 48BF-                   mov rdi, one_string_format           ;%s
    84 0000002D [0000000000000000] 
    85 00000035 4889E6                  mov rsi, rsp
    86 00000038 E8(00000000)            call scanf
    87                                  
    88                                  ;Checks for ctrl-D
    89 0000003D 4898                    cdqe
    90 0000003F 4883F8FF                cmp rax, -1
    91 00000043 745B                    je restore
    92                                  
    93 00000045 B800000000              mov rax, 0
    94 0000004A 4889E7                  mov rdi, rsp                  ;pass input stored in rsp to isinteger
    95 0000004D E8(00000000)            call isinteger                ;checks user input, if integer return 1, else return 0
    96 00000052 4883F800                cmp rax, 0
    97 00000056 741E                    je invalid
    98                                  
    99 00000058 B800000000              mov rax, 0
   100 0000005D 4889E7                  mov rdi, rsp
   101 00000060 E8(00000000)            call atolong                  ;turns string input into a number
   102 00000065 4989C3                  mov r11, rax                  ;stores number into r11
   103                                  
   104 00000068 4F891CE6                mov [r14 + r12*8], r11   ;stores stored number in r11 into array, r14
   105 0000006C 49FFC4                  inc r12                       ;increments r12 to move to next array index
   106                                  
   107 0000006F 4D39EC                  cmp r12, r13                   ;compares current counter to size of array
   108 00000072 7418                    je tooMuch
   109                                  
   110 00000074 EBB0                    jmp loopStart
   111                                  
   112                                  
   113                                  invalid:
   114 00000076 B800000000              mov rax, 0
   115 0000007B 48BF-                   mov rdi, notInt
   115 0000007D [0300000000000000] 
   116 00000085 E8(00000000)            call printf
   117 0000008A EB9A                    jmp loopStart
   118                                  
   119                                  tooMuch:
   120 0000008C B800000000              mov rax, 0
   121 00000091 48BF-                   mov rdi, over
   121 00000093 [4200000000000000] 
   122 0000009B E8(00000000)            call printf
   123                                  
   124                                  ;===== Restore original values to integer registers ===============================================================================
   125                                  restore:
   126 000000A0 4C89E0                  mov rax, r12
   127                                  
   128 000000A3 9D                      popf                                                        ;Restore rflags
   129 000000A4 5B                      pop rbx                                                     ;Restore rbx
   130 000000A5 415F                    pop r15                                                     ;Restore r15
   131 000000A7 415E                    pop r14                                                     ;Restore r14
   132 000000A9 415D                    pop r13                                                     ;Restore r13
   133 000000AB 415C                    pop r12                                                     ;Restore r12
   134 000000AD 415B                    pop r11                                                     ;Restore r11
   135 000000AF 415A                    pop r10                                                     ;Restore r10
   136 000000B1 4159                    pop r9                                                      ;Restore r9
   137 000000B3 4158                    pop r8                                                      ;Restore r8
   138 000000B5 59                      pop rcx                                                     ;Restore rcx
   139 000000B6 5A                      pop rdx                                                     ;Restore rdx
   140 000000B7 5E                      pop rsi                                                     ;Restore rsi
   141 000000B8 5F                      pop rdi                                                     ;Restore rdi
   142 000000B9 5D                      pop rbp                                                     ;Restore rbp
   143                                  
   144 000000BA C3                      ret
   145                                  
   146                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
