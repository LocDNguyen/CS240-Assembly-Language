     1                                  ;=====================================================================================================================================
     2                                  ;Program Name: Arrays
     3                                  ;Programming Language: x86 Assembly
     4                                  ;File Description: This file asks the user to input as many integers in the array. User input is then determined whether
     5                                  ;or no the input is an integer type. If so, add it into the array, or do not add it if otherwise. To stop inputting
     6                                  ;values, the user is prompted to press Ctrl+D. If the array is full, the program automatically stops the user from doing so
     7                                  ;and moves on.
     8                                  
     9                                  
    10                                  ;Author: Justin Bui
    11                                  ;Email: Justin_Bui12@csu.fullerton.edu
    12                                  ;Institution: California State University, Fullerton
    13                                  ;Course: CPSC 240-05
    14                                  ;Start Date: 18 September, 2020
    15                                  
    16                                  ;Copyright (C) 2020 Justin Bui
    17                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
    18                                  ;version 3 as published by the Free Software Foundation.
    19                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
    20                                  ;Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
    21                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.
    22                                  ;======================================================================================================================================
    23                                  
    24                                  extern scanf
    25                                  extern printf
    26                                  extern isnan
    27                                  ; extern isinteger			;From isinteger.asm
    28                                  ; extern atolong				;From atol.asm
    29                                  ; extern printArray
    30                                  global fillarray
    31                                  
    32                                  section .data
    33 00000000 256C640A00              	integerOutputFormat db "%ld", 10, 0
    34 00000005 257300                  	stringOutputFormat db "%s", 0
    35                                  
    36                                  section .bss
    37                                  	;Nothing declared inside .bss
    38                                  
    39                                  section .text
    40                                  fillarray:
    41                                  
    42 00000000 55                      push rbp                                          ;Backup rbp
    43 00000001 4889E5                  mov  rbp,rsp                                      ;The base pointer now points to top of stack
    44 00000004 57                      push rdi                                          ;Backup rdi
    45 00000005 56                      push rsi                                          ;Backup rsi
    46 00000006 52                      push rdx                                          ;Backup rdx
    47 00000007 51                      push rcx                                          ;Backup rcx
    48 00000008 4150                    push r8                                           ;Backup r8
    49 0000000A 4151                    push r9                                           ;Backup r9
    50 0000000C 4152                    push r10                                          ;Backup r10
    51 0000000E 4153                    push r11                                          ;Backup r11
    52 00000010 4154                    push r12                                          ;Backup r12
    53 00000012 4155                    push r13                                          ;Backup r13
    54 00000014 4156                    push r14                                          ;Backup r14
    55 00000016 4157                    push r15                                          ;Backup r15
    56 00000018 53                      push rbx                                          ;Backup rbx
    57 00000019 9C                      pushf                                             ;Backup rflags
    58                                  
    59 0000001A 4989FE                  	mov r14, rdi		;pointer to the array
    60 0000001D 4989F5                  	mov r13, rsi		;array capacity
    61 00000020 41BC00000000            	mov r12, 0		  ;current index of array
    62                                  
    63                                  startOfLoop:
    64                                  
    65 00000026 490FC7F7                    rdrand r15
    66 0000002A F24D0F2AFF              	cvtsi2sd xmm15, r15
    67                                  
    68                                  ;Checking nan
    69 0000002F 488B1C24                 mov rbx, [rsp]
    70 00000033 48B9000000000000F0-      mov rcx, 0x7ff0000000000000    ;isolate the relevant bits
    70 0000003C 7F                 
    71 0000003D 4821CB                   and rbx, rcx
    72 00000040 48C1EB34                 shr rbx, 52                    ;all isolated bits are at the right
    73 00000044 4881FBFF070000           cmp rbx, 2047                  ;compare those isolated bits to 0b11111111111
    74                                  
    75                                  		;call nan function
    76                                      ; mov rax, 0
    77                                      ; movsd xmm0, xmm15
    78                                      ; call isnan
    79                                  
    80 0000004B 4883F801                    cmp rax, 1
    81 0000004F 74D5                        je startOfLoop
    82                                  
    83 00000051 F2470F113CE6                movsd [r14+8*r12], xmm15
    84 00000057 49FFC4                      inc r12
    85 0000005A 4D39EC                      cmp r12, r13
    86 0000005D 7402                        je exitProgram
    87 0000005F EBC5                        jmp startOfLoop
    88                                  
    89                                  exitProgram:
    90                                  
    91                                  
    92 00000061 4C89E0                  mov qword rax, r12				;Backing up r12 into rax to be returned
    93                                  
    94                                  	;Popping all of registers in reverse order as pushes
    95 00000064 5B                      	pop rbx                                                     ;Restore rbx
    96 00000065 415F                    	pop r15                                                     ;Restore r15
    97 00000067 415E                    	pop r14                                                     ;Restore r14
    98 00000069 415D                    	pop r13                                                     ;Restore r13
    99 0000006B 415C                    	pop r12                                                     ;Restore r12
   100 0000006D 415B                    	pop r11                                                     ;Restore r11
   101 0000006F 415A                    	pop r10                                                     ;Restore r10
   102 00000071 4159                    	pop r9                                                      ;Restore r9
   103 00000073 4158                    	pop r8							    ;Restore r8
   104 00000075 59                      	pop rcx                                                     ;Restore rcx
   105 00000076 5A                      	pop rdx                                                     ;Restore rdx
   106 00000077 5E                      	pop rsi                                                     ;Restore rsi
   107 00000078 5F                      	pop rdi                                                     ;Restore rdi
   108 00000079 5D                      	pop rbp                                                     ;Restore rbp
   109 0000007A 5B                      	pop rbx
   110                                  
   111 0000007B C3                      	ret                                               ;Returning current number of items in array
